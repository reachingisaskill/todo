#!/bin/env python3
#
# Implements a command line todo manager.
#
# Store your todo list and displays it in multiple ways depending on urgency, importance, date, etc.
#
# Overall structure
#  List:
#    - Items
#      + Tags
#      + Description
#      + Date added
#      + Completed
#      + Priority
#      + Urgency
#      + Deadline

import argparse
import pathlib
import json
import time
import os


## Global Configuration Variables
USER_FILE = "$HOME/.todo"
DEBUG = False

## Utility Functions
def debug(*args) :
  global DEBUG
  if DEBUG :
    print(args)


def JsonGet(data, name, default=None) :
  if name in data :
    return data[name]
  elif default == None :
    raise ValueError("Expected key ({0}) not found in json: {1}".format(name, data))
  else:
    return default


def Confirm(message) :
  while True :
    answer = input(message)
    if answer == 'y' or answer == 'Y' :
      return True
    elif answer == 'n' or answer == 'N' :
      return False
    else :
      print("Unexpected response.")


class ActionConcatenate(argparse.Action):
  def __init__(self, option_strings, dest, **kwargs):
    super().__init__(option_strings, dest, **kwargs)

  def __call__(self, parser, namespace, values, option_string=None):
    string = ""
    if len(values) > 0:
      string = values[0]
      for val in values[1:]:
        string = "{0} {1}".format(string, val)
    debug("STRING = {0} -- {1}".format(string, values))
    setattr(namespace, self.dest, string)


class Item:
  def __init__(self, name, desc="", tags=[], date=time.gmtime(), comp=False, prio=1, urg=1, deadline=None):
    self.name = name
    self.description = desc
    self.tags = tags
    self.date = date
    self.completed = comp
    self.priority = prio
    self.urgency = urg
#    self.deadline = deadline


  def print_brief(self):
    tag_string = self.__build_tag_string()
    return "{0} {1}".format(self.name, tag_string)

  def print_detail(self):
    tag_string = self.__build_tag_string()
    return "{0} <{1}x{2}> {3}\n{4}".format(self.name, self.priority, self.urgency, tag_string, self.description)


  def __build_tag_string(self):
    tag_string = ""
    if not(self.tags is None) and len(self.tags) > 0:
      tag_string += "["
      for num, t in enumerate(self.tags):
        tag_string += format(t)
        if num < len(self.tags):
            tag_string += ", "
      tag_string += "]"

    return tag_string


  def __fromJson(args):
    name = JsonGet(args, "name") 
    desc = JsonGet(args, "description", "")
    tags = JsonGet(args, "tags", [])
    date = time.localtime(JsonGet(args, "date"))
    comp = JsonGet(args, "competed", False)
    prio = JsonGet(args, "priority", 1)
    urge = JsonGet(args, "urgency", 1)
#    dead = time.localtime(JsonGet(args, "deadline", None))
    newItem = Item(name, tags, desc, date, comp, prio, urge)

    return newItem


  def __toJson(item):
    data = {}
    data["name"] = item.name
    data["tags"] = item.tags
    data["description"] = item.description
    data["date"] = time.mktime(item.date)
    data["completed"] = item.completed
    data["priority"] = item.priority
    data["urgency"] = item.urgency
#    data["deadline"] = time.mktime(item.deadline)

    return data


  build = staticmethod(__fromJson)
  write = staticmethod(__toJson)


class List:

  def __init__(self):
    self._tags = []
    self._items = []


  def __iter__(self):
    for it in self._items:
      yield it

  def __len__(self):
    return len(self._items)

  def __getitem__(self, key):
    return self._items[key]
  
  def __setitem__(self, key, val):
    self._items[key] = val

  def __delitem__(self, key):
    del self._items[key]

  def __contains__(self, key):
    for it in self._items :
      if it.name == key :
        return True
    return False


  def load(self, data):
    for item in data["items"]:
      newItem = Item.build(item)
      self._items.append(newItem)


  def save(self):
    data = {}
    items = []
    for item in self._items:
      items.append(Item.write(item))
    
    data["items"] = items
    return data


  def insert(self, item):
    self._items.append(item)


  def delete(self, num):
    pass


class Manager:
  def __init__(self):
    self._data = {}
    self._modified = False


  def load(self, config):
    debug("LOAD", config)
    for list_name, data in config.items():
      l = List()
      l.load(data)
      self._data[list_name] = l


  def save(self):
    debug("SAVE")
    data = {}
    for list_name, list_data in self._data.items():
      data[list_name] = list_data.save()

    return data


  def show(self, args):
    debug("SHOW", args)
    for list_name, data in self._data.items():
      indent = "  "
      debug('{0}{1}'.format(indent, list_name))
      indent = "    "
      for num, item in enumerate(data) :
        if args.verbose :
          print("{0}{1}. {2}".format(indent, num, item.print_detail()))
        else :
          print("{0}{1}. {2}".format(indent, num, item.print_brief()))


  def add(self, args):
    debug("ADD", args)
    if args.list in self._data :
      debug(args.description)
#    new_item = Item(args.name, args.description, args.tags, time.gmtime(), comp=False, prio=args.priority, urg=args.urgency, deadline=args.deadline)
      new_item = Item(args.name, args.description, args.tags, time.gmtime(), comp=False)
      self._data[args.list].insert(new_item)
      self._modified = True

    else:
      available = [ name for name in self._data ]
      raise ValueError('List not found: {0}. Available lists: {1}'.format(args.list, available))


  def delete(self, args):
    debug("DELETE", args)
    if args.list in self._data :
      if args.name in self._data[args.list] :
        if Confirm('Delete {0} (Y/N)'.format(args.name)) :
          del self._data[args.list][args.name]
          self._modified = True
        else :
          self._modeified = False

      else :
        print('Failed to find item {0}'.format(args.name))

    else :
      print('Failed to find list {0}'.format(args.list))


  def update(self, args):
    debug("UPDATE", args)
    self._modified = True


  def tick(self, args):
    debug("TICK", args)
    self._modified = True


  def list(self, args):
    debug("LIST", args)
    if args.name in self._data :
      if args.delete :
        if Confirm('Are you sure you want to delete the list: {0} (Y/N): '.format(args.name)) :
          del self._data[args.name]
          self._modified = True
        else :
          self._modified = False
        return

    elif not args.delete :
      self._modified = True
      self._data[args.name] = List()

    else :
      available = [ name for name in self._data ]
      raise ValueError('List not found: {0}. Available lists: {1}'.format(args.name, available))


  def modified(self):
    return self._modified


def save_todo(todo, file):
  data = todo.save()
  debug("DATA:", data)
  json.dump(data, file)


def load_todo(file):
  config = json.load(file)
  todo.load(config)
  return todo


if __name__ == "__main__" :

  parser = argparse.ArgumentParser(description='Manages your todo list and offers ways of displaying and organising it.')

  parser.add_argument('-f', '--file', type=pathlib.Path, help="Custom todo list to use", default=USER_FILE)
  parser.add_argument('-v', '--verbose', action='store_true', help='Prints excessive info to show you what\' going on')
#  parser.set_defaults(func=Manager.show) # By default we just run the default show command

  subparsers = parser.add_subparsers()

  p_show = subparsers.add_parser('show', help='Display a subset or the entire todo list')
  p_show.add_argument('-a', '--all', action='store_true', default=False, help='All. Show everything')
  p_show.set_defaults(func=Manager.show)

  p_add = subparsers.add_parser('add', help='Add an item to the todo list')
  p_add.add_argument('list', type=str, help='The list to add the item to')
  p_add.add_argument('name', type=str, help='Name of the todo list item')
  p_add.add_argument('-t', '--tags', type=str, action='append', nargs='+', help='Tags to organize the items by') 
  p_add.add_argument('-p', '--priority', choices=['1', '2', '3', '4', '5'], help='Priority of the task (1-5)')
  p_add.add_argument('-u', '--urgency', choices=['1', '2', '3', '4', '5'], help='Urgency of the task (1-5)')
  p_add.add_argument('description', type=str, nargs=argparse.REMAINDER, action=ActionConcatenate, help='Detailed description for the list item')
  p_add.set_defaults(func=Manager.add)

  p_delete = subparsers.add_parser('delete', help='Remove an item from the todo list')
  p_delete.add_argument('list', type=str, help='The list to remove the item from')
  p_delete.add_argument('name', type=str, help='The name of the list item to delete')
  p_delete.set_defaults(func=Manager.delete)

  p_update = subparsers.add_parser('update', help='Update an item in the todo list')
  p_update.set_defaults(func=Manager.update)

  p_list = subparsers.add_parser('list', help='Add, edit or remove a list')
  p_list.add_argument('name', nargs='?', help='Name of the list')
  p_list.add_argument('-d', '--delete', action='store_true', help='Delete the named list')
  p_list.set_defaults(func=Manager.list)

  namespace = parser.parse_args()

  if namespace.verbose :
    DEBUG = True

  todo = Manager()

  try:
    if os.path.isfile(namespace.file):
      with open(namespace.file) as f:
        load_todo(f)
    else:
      debug("Creating new todo file: {0}".format(namespace.file))
      with open(namespace.file, 'w') as f:
        save_todo(todo, f)
#      raise ValueError("Failed to find todo file: {}".format(namespace.file))
  except ValueError as e:
    print("Failed to load the todo file ({})".format(namespace.file))
    print("Error:", e)
    os._exit(1)

  try:
    namespace.func(todo, namespace)
  except ValueError as e:
    print("Failed:", e)
    os._exit(1)

#  try:
  debug("HERE", todo.modified())
  if todo.modified() :
    debug("MODIFYING FILE")
    tmp_file = str(namespace.file)+".tmp"
    with open(tmp_file, 'w') as f:
      save_todo(todo, f)
    os.remove(namespace.file)
    os.rename(tmp_file, namespace.file)

#  except ValueError as e:
#    print("Failed to write file to file:", e)
#    os._exit(1)

